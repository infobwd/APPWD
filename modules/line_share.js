/**
 * Simplified News Share Module
 * ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
 */

import * as CFG from '../config.js';

// === Simple State Management ===
const ShareState = {
  isLiffReady: false,
  isInitializing: false,
  shareInProgress: false
};

// === Utility Functions ===
function safeJsonStringify(obj) {
  try {
    return JSON.stringify(obj || {});
  } catch (error) {
    console.error('JSON stringify failed:', error);
    return '{}';
  }
}

function safeUrlEncode(str) {
  try {
    return encodeURIComponent(str);
  } catch (error) {
    console.error('URL encode failed:', error);
    return '';
  }
}

// === LIFF Management ===
async function initializeLiff() {
  if (ShareState.isLiffReady) {
    return window.liff;
  }
  
  if (ShareState.isInitializing) {
    // ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á initialize ‡∏≠‡∏¢‡∏π‡πà
    await new Promise(resolve => setTimeout(resolve, 1000));
    return ShareState.isLiffReady ? window.liff : null;
  }
  
  ShareState.isInitializing = true;
  
  try {
    if (!window.liff) {
      throw new Error('LIFF SDK not loaded');
    }
    
    const liffId = CFG?.LIFF_ID || window.LIFF_ID || '';
    if (!liffId) {
      throw new Error('LIFF ID not configured');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LIFF ‡∏ñ‡∏π‡∏Å initialize ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!window.liff.getOS) {
      await window.liff.init({ liffId });
    }
    
    ShareState.isLiffReady = true;
    ShareState.isInitializing = false;
    return window.liff;
    
  } catch (error) {
    ShareState.isInitializing = false;
    console.error('LIFF init failed:', error);
    throw error;
  }
}

// === News Flex Message Creator ===
function createNewsFlexCard({ title, description, url, imageUrl, category, publishedAt }) {
  // Validate ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const safeTitle = (title || '‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£').replace(/[^\u0E00-\u0E7F\w\s\-.,!?()]/g, '').substring(0, 60);
  const safeDesc = description ? description.replace(/[^\u0E00-\u0E7F\w\s\-.,!?()]/g, '').substring(0, 100) : null;
  const safeUrl = url || location.href;
  const safeCategory = (category || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ').replace(/[^\u0E00-\u0E7F\w\s\-]/g, '').substring(0, 20);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î
  let validImageUrl = null;
  if (imageUrl) {
    try {
      const urlObj = new URL(imageUrl);
      if (urlObj.protocol === 'https:' && 
          /\.(jpg|jpeg|png|gif|webp)(\?.*)?$/i.test(urlObj.pathname + urlObj.search)) {
        validImageUrl = imageUrl;
      }
    } catch (e) {
      console.warn('Invalid image URL:', imageUrl);
    }
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Card ‡πÅ‡∏ö‡∏ö minimal
  const flexCard = {
    type: 'bubble',
    size: 'kilo'
  };
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤ validate ‡∏ú‡πà‡∏≤‡∏ô
  if (validImageUrl) {
    flexCard.hero = {
      type: 'image',
      url: validImageUrl,
      size: 'full',
      aspectRatio: '20:13',
      aspectMode: 'cover'
    };
  }
  
  // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const bodyContents = [
    {
      type: 'text',
      text: safeTitle,
      weight: 'bold',
      size: 'md',
      wrap: true
    }
  ];
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° description ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á
  if (safeDesc && safeDesc.trim()) {
    bodyContents.push({
      type: 'text',
      text: safeDesc,
      size: 'sm',
      color: '#6b7280',
      wrap: true
    });
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• meta ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
  const metaParts = [];
  if (safeCategory !== '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ') metaParts.push(safeCategory);
  if (publishedAt) {
    try {
      const date = new Date(publishedAt);
      if (!isNaN(date.getTime())) {
        metaParts.push(date.toLocaleDateString('th-TH', { 
          day: 'numeric', 
          month: 'short' 
        }));
      }
    } catch (e) {
      // Skip date if invalid
    }
  }
  
  if (metaParts.length > 0) {
    bodyContents.push({
      type: 'text',
      text: metaParts.join(' ‚Ä¢ '),
      size: 'xs',
      color: '#9ca3af'
    });
  }
  
  flexCard.body = {
    type: 'box',
    layout: 'vertical',
    contents: bodyContents,
    spacing: 'sm'
  };
  
  // ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
  flexCard.footer = {
    type: 'box',
    layout: 'vertical',
    contents: [
      {
        type: 'button',
        style: 'primary',
        height: 'sm',
        action: {
          type: 'uri',
          label: '‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß',
          uri: safeUrl
        }
      }
    ]
  };
  
  return flexCard;
}

function isValidImageUrl(url) {
  try {
    const urlObj = new URL(url);
    return urlObj.protocol === 'https:' && 
           /\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname);
  } catch {
    return false;
  }
}

// === UI Feedback Functions ===
function showShareLoading() {
  const loading = document.createElement('div');
  loading.id = 'shareLoading';
  loading.className = 'fixed top-4 left-4 right-4 z-50 p-3 bg-blue-50 border border-blue-200 text-blue-800 rounded-lg text-sm font-medium text-center';
  loading.innerHTML = `
    <div class="flex items-center justify-center gap-2">
      <span class="animate-spin">‚ü≥</span>
      <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ä‡∏£‡πå...</span>
    </div>
  `;
  document.body.appendChild(loading);
}

function hideShareLoading() {
  const loadingEl = document.getElementById('shareLoading');
  if (loadingEl) loadingEl.remove();
}

function showShareSuccess() {
  hideShareLoading();
  const successEl = document.createElement('div');
  successEl.className = 'fixed top-4 left-4 right-4 z-50 p-3 bg-green-50 border border-green-200 text-green-800 rounded-lg text-sm font-medium text-center';
  successEl.innerHTML = `
    <div class="flex items-center justify-center gap-2">
      <span>‚úÖ</span>
      <span>‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</span>
    </div>
  `;
  document.body.appendChild(successEl);
  
  setTimeout(() => {
    if (successEl && successEl.parentElement) {
      successEl.remove();
    }
  }, 3000);
}

function showShareError(message) {
  hideShareLoading();
  const errorEl = document.createElement('div');
  errorEl.className = 'fixed top-4 left-4 right-4 z-50 p-3 bg-red-50 border border-red-200 text-red-800 rounded-lg text-sm';
  errorEl.innerHTML = `
    <div class="flex items-start gap-2">
      <span>‚ö†Ô∏è</span>
      <div class="flex-1">
        <div class="font-medium">${message}</div>
      </div>
      <button onclick="this.parentElement.parentElement.remove()" class="text-red-600 hover:text-red-800">√ó</button>
    </div>
  `;
  
  document.body.appendChild(errorEl);
  
  setTimeout(() => {
    if (errorEl && errorEl.parentElement) {
      errorEl.remove();
    }
  }, 5000);
}

// === Main Share Function ===
export async function shareNews(newsData) {
  if (ShareState.shareInProgress) {
    showShareError('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà');
    return false;
  }
  
  ShareState.shareInProgress = true;
  
  try {
    showShareLoading();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß
    if (!newsData || !newsData.title) {
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    }
    
    // Initialize LIFF
    const liff = await initializeLiff();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ login LINE
    if (!liff.isLoggedIn()) {
      hideShareLoading();
      const shouldLogin = confirm('‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö LINE ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ä‡∏£‡πå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
      if (shouldLogin) {
        try {
          await liff.login();
          // ‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          ShareState.shareInProgress = false;
          return await shareNews(newsData);
        } catch (loginError) {
          ShareState.shareInProgress = false;
          showShareError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö LINE ‡πÑ‡∏î‡πâ');
          return false;
        }
      } else {
        ShareState.shareInProgress = false;
        return false;
      }
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
    const flexCard = createNewsFlexCard(newsData);
    const altText = `üì∞ ${newsData.title}`;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const isInClient = liff.isInClient();
    const context = isInClient ? await liff.getContext().catch(() => null) : null;
    
    console.log('Share environment check:', {
      isInClient,
      hasContext: !!context,
      isLoggedIn: liff.isLoggedIn(),
      userAgent: navigator.userAgent,
      platform: navigator.platform
    });
    
    // ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏ô LINE App
    if (isInClient && context && liff.isLoggedIn()) {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API availability ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        const canShare = await liff.isApiAvailable('shareTargetPicker');
        console.log('Can use shareTargetPicker:', canShare);
        
        if (canShare) {
          const shareResult = await liff.shareTargetPicker([{
            type: 'flex',
            altText: altText,
            contents: flexCard
          }]);
          
          console.log('Share result:', shareResult);
          showShareSuccess();
          ShareState.shareInProgress = false;
          return true;
        } else {
          console.log('shareTargetPicker not available, trying sendMessages');
        }
      } catch (shareError) {
        console.error('shareTargetPicker error:', shareError);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user cancel ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error
        if (shareError.message && (
          shareError.message.includes('cancel') || 
          shareError.message.includes('cancelled') ||
          shareError.message.includes('User cancel')
        )) {
          hideShareLoading();
          ShareState.shareInProgress = false;
          return false;
        }
      }
      
      // Fallback: ‡∏•‡∏≠‡∏á sendMessages ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà shareTargetPicker ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      try {
        const canSend = await liff.isApiAvailable('sendMessages');
        console.log('Can use sendMessages:', canSend);
        
        if (canSend) {
          await liff.sendMessages([{
            type: 'flex',
            altText: altText,
            contents: flexCard
          }]);
          
          showShareSuccess();
          ShareState.shareInProgress = false;
          return true;
        }
      } catch (sendError) {
        console.error('sendMessages error:', sendError);
      }
    }
    
    // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≠‡∏Å LINE App
    console.log('Using fallback method - copy URL');
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° Web Share API ‡∏Å‡πà‡∏≠‡∏ô
    if (!isInClient && navigator.share && navigator.canShare) {
      try {
        const shareData = {
          title: newsData.title,
          text: newsData.description || newsData.title,
          url: newsData.url
        };
        
        if (navigator.canShare(shareData)) {
          await navigator.share(shareData);
          showShareSuccess();
          ShareState.shareInProgress = false;
          return true;
        }
      } catch (webShareError) {
        console.log('Web Share API failed:', webShareError);
      }
    }
    
    // Fallback ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå
    await copyNewsUrl(newsData.url || location.href);
    ShareState.shareInProgress = false;
    return true;
    
  } catch (error) {
    console.error('Share failed:', error);
    ShareState.shareInProgress = false;
    
    let errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ';
    
    if (error.message?.includes('User cancel')) {
      hideShareLoading();
      return false;
    } else if (error.message?.includes('LIFF')) {
      errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô LINE app ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏£‡πå';
    } else if (error.message?.includes('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')) {
      errorMessage = error.message;
    }
    
    showShareError(errorMessage);
    return false;
  }
}

// === Fallback Copy Function ===
async function copyNewsUrl(url) {
  try {
    await navigator.clipboard.writeText(url);
    showShareSuccess('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
  } catch (error) {
    // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤
    const textArea = document.createElement('textarea');
    textArea.value = url;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    showShareSuccess('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
  }
}

// === Global Interface ===
window.shareNewsPost = async function(postId) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ supabase)
    if (!window.supabase) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
    
    const { data: post, error } = await window.supabase
      .from('posts')
      .select('id,title,body,category,cover_url,published_at')
      .eq('id', postId)
      .maybeSingle();
    
    if (error || !post) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß
    const baseUrl = localStorage.getItem('APPWD_PUBLIC_URL') || './';
    const newsUrl = `${baseUrl}index.html#post?id=${post.id}`;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏à‡∏≤‡∏Å body
    let description = '';
    if (post.body) {
      // ‡∏•‡∏ö Markdown syntax ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î text ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
      const plainText = post.body.replace(/[#*\[\]()]/g, '').trim();
      description = plainText.substring(0, 80);
      if (plainText.length > 80) description += '...';
    }
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå
    const newsData = {
      title: post.title,
      description: description,
      url: newsUrl,
      imageUrl: post.cover_url,
      category: post.category,
      publishedAt: post.published_at
    };
    
    return await shareNews(newsData);
    
  } catch (error) {
    console.error('Share news post failed:', error);
    showShareError(error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ');
    return false;
  }
};

// === Alternative Simple Function ===
window.shareNewsSimple = async function(title, url) {
  const newsData = {
    title: title || '‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
    url: url || location.href
  };
  
  return await shareNews(newsData);
};

// === Export for compatibility ===
export { shareNews as sharePostData };

console.log('LINE Share module loaded successfully');
